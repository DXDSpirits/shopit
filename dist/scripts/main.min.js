(function() {

    moment.lang('zh-cn');

    var lazyResize = _.debounce(function() {
        $('.views-wrapper').height($(window).height());
    }, 300);
    $(window).resize(lazyResize);
    lazyResize();

    $('body').on('click', '[data-route]', function(e) {
        var route = $(e.currentTarget).data('route');
        if (route == 'return') {
            window.history.back();
        } else if (route == 'preview') {
            App.previewStory(App.story.get('name'));
        } else {
            App.router.navigate(route);
        }
    });

    /*
     * App
     */

    var App = {
        Version: '1.0.0',
        Models: {},
        Views: {},
        Pages: {}
    };

    /*
     * Page Router
     */

    App.pageRouter = new (function(pages) {
        this.pages = pages;
        this.history = { active: null, stack: [] };
        this.goTo = function(pageName, options) {
            var next = this.pages[pageName];
            var prev = _.last(this.history.stack);
            (options || (options = {})).caller = options.caller || this.history.active;
            if (!next) {
            } else if (next == prev) {
                this.history.active.leave();
                if (this.pushNext) {
                    this.history.stack.push(this.history.active);
                } else {
                    this.history.stack.length -= 1;
                }
                options.reverse = !this.pushNext;
                next.go(options);
                this.history.active = next;
            } else {
                if (this.history.active) {
                    this.history.active.leave();
                    this.history.stack.push(this.history.active);
                }
                next.go(options);
                this.history.active = next;
            }
            this.pushNext = false;
        };
        this.clearHistory = function() {
            this.history.stack.length = 0;
        };
        this.refreshActivePage = function() {
            this.history.active.refresh();
        };
        this.goBack = function() {
            if (this.history.stack.length > 0) {
                var prev = this.history.stack.pop();
                this.history.active = prev;
                this.history.active.showPage({reverse: true});
            }
        };
        this.pop = function() {
            if (this.history.stack.length > 0) {
                var prev = this.history.stack.pop();
                this.history.active = prev;
            }
        };
    })(App.Pages);

    /*
     * Utilities
     */

    App.getTemplate = function(name) {
        return $('#template-' + name).html();
    };

    App.securePost = function(url, data, success, context) {
        var ctx = context || this;
        var dataStr = App.encryptJSON(data);
        var model = new (Amour.Model.extend({
            parse: function(response) {
                return response ? App.decryptJSON(response) : {};
            }
        }))();
        model.save({
            data: dataStr
        }, {
            url: url,
            dataType: 'html',
            success: function(model) {
                success && success.call(ctx, model.toJSON());
            }
        });
    };

    /*
     * Ajax events
     */

    var timeout = 500;
    var timeout_stop, timeout_error;

    Amour.ajax.on('start', function() {
        clearTimeout(timeout_stop);
        clearTimeout(timeout_error);
        $('#apploader').removeClass('invisible');
    });

    Amour.ajax.on('stop', function() {
        timeout_stop = setTimeout(function () {
            $('#apploader').addClass('invisible');
            timeout = 500;
        }, timeout);
    });

    Amour.ajax.on('error', function() {
        $('#apploader .ajax-error').removeClass('hidden');
        timeout_error = setTimeout(function () {
            $('#apploader .ajax-error').addClass('hidden');
        }, (timeout = 1500));
    });

    Amour.ajax.on('unauthorized', function() {
        var url = '/accounts/?url=' + encodeURIComponent(location.href);
        App.openUrl(url, {
            replace: true
        });
    });

    Amour.ajax.on('forbidden', function() {
        var url = '/accounts/?url403=' + encodeURIComponent(location.href);
        App.openUrl(url, {
            replace: true
        });
    });

    /*
     * Initializations
     */

    App.vent = new Amour.EventAggregator();

    /*
     * Authorizations
     */

    /*
     * Start application
     */
    App.start = function() {
        Backbone.history.start();
    };

    window.App = App;

})();

(function() {

    App.PageView = Amour.View.extend({
        disablePage: function() {
            this.undelegateEvents();
            this.go = function() {};
            this.refresh = function() {};
            this.showPage = function() {};
        },
        initView: function() {
            if (!this.el) {
                this.disablePage();
                return;
            }
            this.views = {};
            _.bindAll(this, 'showPage', 'go', 'refresh', 'render', 'reset');
            var $el = this.$el;
            this.$('.wrapper').on('webkitAnimationEnd', function(e) {
                var animationName = e.originalEvent.animationName;
                if (animationName == "slideouttoleft" || animationName == "slideouttoright") {
                    $el.trigger('pageClose');
                } else if (animationName == "slideinfromright" || animationName == "slideinfromleft") {
                    $el.trigger('pageOpen');
                }
            });
            if (this.initPage) this.initPage();
        },
        leave: function() {},
        go: function(options) {
            this.options = options || {};
            this.reset();
            var render = this.render;
            var pageOpen = _.once(function() {
                render();
            });
            _.delay(pageOpen, 1000);
            this.$el.one('pageOpen', pageOpen);
            this.showPage();
        },
        refresh: function() {
            var render = this.render;
            var pageOpen = _.once(function() {
                render();
            });
            _.delay(pageOpen, 1000);
            this.$el.one('pageOpen', pageOpen);
            this.showPage();
        },
        reset: function() {},
        showPage: function(options) {
            var options = options || this.options || {};
            var $curPage;
            var isSamePage = !this.$el.hasClass('view-hidden');
            if (isSamePage) {
                $curPage = this.$el.clone().prependTo('.views-wrapper');
                $curPage.find('.wrapper').scrollTop(this.$('.wrapper').scrollTop());
                this.$el.addClass('view-hidden');
            } else {
                $curPage = $('.view:not(".view-hidden")');
            }
            var closeCurPage = _.once(function() {
                $curPage.removeClass('view-prev').removeClass('view-prev-reverse')
                if (isSamePage) {
                    $curPage.remove();
                } else {
                    $curPage.addClass('view-hidden');
                }
                $curPage.find('input').blur();
            });
            $curPage.addClass('view-prev');
            if (options.reverse) $curPage.addClass('view-prev-reverse');
            _.delay(closeCurPage, 1000);
            $curPage.one('pageClose', closeCurPage);

            var $nextPage = this.$el;
            var openNextPage = _.once(function() {
                $nextPage.removeClass('view-next').removeClass('view-next-reverse');
                $nextPage.find('input').blur();
                window.scrollTo(0, 0);
            });
            $nextPage.removeClass('view-hidden');
            $nextPage.addClass('view-next');
            if (options.reverse) $nextPage.addClass('view-next-reverse');
            _.delay(openNextPage, 1000);
            $nextPage.one('pageOpen', openNextPage);
        }
    });

})();

(function() {

    var pageRouter = App.pageRouter;

    App.router = new (Backbone.Router.extend({
        navigate: function(fragment, options) {
            options = options || {};
            options.trigger = !(options.trigger === false);
            options.replace && pageRouter.pop();
            pageRouter.pushNext = true;
            Backbone.Router.prototype.navigate.call(this, fragment, options);
        },
        initialize: function(){
            this.route('*path', 'index');
            this.route(/product\/(\d+)/, 'product');
            this.route(/product\/(\d+)\/address/, 'productAddress');
            this.route(/brand\/(\d+)/, 'brand');
            this.route(/brand\/(\d+)\/address/, 'brandAddress');
            this.route(/topic\/(\d+)/, 'topic');
            this.route(/topic\/(\d+)\/comments/, 'comments');
        },
        index: function(path) {
            // this.navigate('home', { replace: true });
            this.navigate('topic/96', { replace: true });
        },
        product: function(pid) {
            pageRouter.goTo('Product', { productId: pid });
        },
        brand: function(bid) {
            pageRouter.goTo('Brand', { brandId: bid });
        },
        topic: function(tid) {
            pageRouter.goTo('Topic', { topicId: tid });
        },
        comments: function(tid) {
            pageRouter.goTo('TopicComments', { topicId: tid });
        },
        brandAddress: function(bid) {
            pageRouter.goTo('Address', { brandId: bid });
        },
        productAddress: function(pid) {
            pageRouter.goTo('Address', { productId: pid });
        }
    }))();

})();

(function() {

    var mediaSize = 9;

    var ProductModel = Amour.Model.extend({
        url: Amour.APIRoot + 'shopit/data/getItemBycityName.do'
    });

    var ProductSimilarCollection = Amour.Collection.extend({
        url: Amour.APIRoot + 'shopit/data/listSameCategoryItemsByid.do'
    });

    var ProductBrandCollection = Amour.Collection.extend({
        url: Amour.APIRoot + 'shopit/data/listItemByBid.do'
    });

    var ProductView = Amour.ModelView.extend({
        template: App.getTemplate('product-detail')
    });

    var MediasListView = Amour.CollectionView.extend({
        ModelView: Amour.ModelView.extend({
            events: { 'click': 'viewDetail' },
            className: 'media-item',
            template: '<div class="img" data-bg-src="{{apiFullpath img}}"></div><div class="name">{{name}}</div><div>￥{{offPrice}}</div>',
            viewDetail: function() {
                App.router.navigate('product/' + this.model.id);
            }
        })
    });

    App.Pages.Product = new (App.PageView.extend({
        events: {
            'click .store .btn': 'viewStores'
        },
        initPage: function() {
            this.product = new ProductModel();
            this.similarProducts = new ProductSimilarCollection();
            this.brandProducts = new ProductBrandCollection();
            this.views = {
                product: new ProductView({
                    model: this.product,
                    el: this.$('.product-wrapper')
                }),
                similarProducts: new MediasListView({
                    collection: this.similarProducts,
                    el: this.$('.similar-products .media-list')
                }),
                brandProducts: new MediasListView({
                    collection: this.brandProducts,
                    el: this.$('.brand-products .media-list')
                })
            };
        },
        viewStores: function() {
            App.router.navigate(['product', this.product.id, 'address'].join('/'));
        },
        render: function() {
            var productId = this.options.productId;
            var self = this;
            this.product.fetch({
                dataType: 'jsonp',
                data: { id: productId },
                success: function(model) {
                    var brandId = self.product.get('brand').id;
                    self.brandProducts.fetch({
                        dataType: 'jsonp',
                        data: { id: brandId, start: 0, size: mediaSize }
                    });
                    self.$('.store').toggleClass('hidden', model.get('online') == 1);
                }
            });
            this.similarProducts.fetch({
                dataType: 'jsonp',
                data: { id: productId, size: mediaSize }
            });
        }
    }))({el: $('#view-product')});

})();

(function() {

    var BrandModel = Amour.Model.extend({
        url: Amour.APIRoot + 'shopit/data/getBrand.do'
    });

    var ProductsCollection = Amour.Collection.extend({
        url: Amour.APIRoot + 'shopit/data/listItemByBid.do'
    });

    var TopicsCollection = Amour.Collection.extend({
        url: Amour.APIRoot + 'shopit/data/listTopicByBid.do'
    });

    var BrandView = Amour.ModelView.extend({
        events: {
            'click .more': 'showMore'
        },
        template: App.getTemplate('brand-detail'),
        render: function() {
            Amour.ModelView.prototype.render.call(this);
            var h = this.$('.description').height();
            if (h > 50) {
                var desc = this.model.get('description').substr(0, $(window).width() / 10);
                this.$('.desc').text(desc + ' ......');
                this.$('.description').addClass('ellipsis');
            }
            return this;
        },
        showMore: function() {
            $('#desc-full')
            .find('h4').text('品牌介绍').end()
            .find('article').text(this.model.get('description')).end()
            .removeClass('invisible')
            .one('click', function() {
                $(this).addClass('invisible');
            });
        }
    });

    var TopicsListView = Amour.CollectionView.extend({
        ModelView: Amour.ModelView.extend({
            events: { 'click': 'viewDetail' },
            className: 'topic-media-item',
            template: '<div class="img" data-bg-src="{{apiFullpath img}}"><div class="title">{{title}}</div></div>',
            viewDetail: function() {
                App.router.navigate('topic/' + this.model.id);
            }
        })
    });

    var ProductsListView = Amour.CollectionView.extend({
        ModelView: Amour.ModelView.extend({
            events: { 'click': 'viewDetail' },
            className: 'product-media-item',
            template: App.getTemplate('product-media-item'),
            viewDetail: function() {
                App.router.navigate('product/' + this.model.id);
            }
        })
    });

    App.Pages.Brand = new (App.PageView.extend({
        events: {
            'click .store .btn': 'viewStores'
        },
        initPage: function() {
            this.brand = new BrandModel();
            this.products = new ProductsCollection();
            this.topics = new TopicsCollection();
            this.views = {
                brand: new BrandView({
                    model: this.brand,
                    el: this.$('.brand-wrapper')
                }),
                products: new ProductsListView({
                    collection: this.products,
                    el: this.$('.brand-products .media-list')
                }),
                topics: new TopicsListView({
                    collection: this.topics,
                    el: this.$('.brand-topics .media-list')
                })
            };
        },
        viewStores: function() {
            App.router.navigate(['brand', this.brand.id, 'address'].join('/'));
        },
        render: function() {
            var brandId = this.options.brandId;
            this.brand.fetch({
                dataType: 'jsonp',
                data: { id: brandId }
            });
            this.products.fetch({
                global: false,
                dataType: 'jsonp',
                data: { id: brandId, start: 0, size: 99 }
            });
            this.topics.fetch({
                global: false,
                dataType: 'jsonp',
                data: { id: brandId, start: 0, size: 99 }
            });
        }
    }))({el: $('#view-brand')});

})();

(function() {

    var TopicModel = Amour.Model.extend({
        url: Amour.APIRoot + 'shopit/admin/getTopic.do'
    });

    var ProductsCollection = Amour.Collection.extend({
        url: Amour.APIRoot + 'shopit/data/listItemByTid.do'
    });

    var CommentsCollection = Amour.Collection.extend({
        url: Amour.APIRoot + 'shopit/data/getAllCommentByTopic.do'
    });

    var TopicView = Amour.ModelView.extend({
        template: App.getTemplate('topic-detail')
    });

    var ProductsListView = Amour.CollectionView.extend({
        ModelView: Amour.ModelView.extend({
            events: { 'click': 'viewDetail' },
            className: 'media-item',
            template: App.getTemplate('product-media-item'),
            viewDetail: function() {
                App.router.navigate('product/' + this.model.id);
            }
        })
    });

    var CommentsListView = Amour.CollectionView.extend({
        ModelView: Amour.ModelView.extend({
            className: 'comment-item',
            template: App.getTemplate('comment-item'),
            serializeData: function() {
                var data = Amour.ModelView.prototype.serializeData.call(this);
                data.formatted_date = moment(data.createTime).format('MM月DD日 HH:mm');
                data.likeCount = +data.likeCount;
                return data;
            }
        })
    });

    App.Pages.Topic = new (App.PageView.extend({
        events: {
            'click .comment-tip': 'viewAllComments'
        },
        initPage: function() {
            this.topic = new TopicModel();
            this.products = new ProductsCollection();
            this.comments = new CommentsCollection();
            this.views = {
                topic: new TopicView({
                    model: this.topic,
                    el: this.$('.topic-wrapper')
                }),
                products: new ProductsListView({
                    collection: this.products,
                    el: this.$('.topic-products .media-list')
                }),
                comments: new CommentsListView({
                    collection: this.comments,
                    el: this.$('.comments-list')
                })
            };
        },
        viewAllComments: function() {
            App.router.navigate(['topic', this.topic.id, 'comments'].join('/'));
        },
        render: function() {
            var topicId = this.options.topicId;
            this.topic.fetch({
                dataType: 'jsonp',
                data: { id: topicId },
            });
            this.products.fetch({
                dataType: 'jsonp',
                data: { id: topicId, start: 0, size: 99 }
            });
            var self = this;
            this.comments.fetch({
                dataType: 'jsonp',
                data: { tid: topicId, size: 3, max_id: null },
                success: function(collection) {
                    self.$('.comment-tip span').text(collection.size);
                }
            });
        }
    }))({el: $('#view-topic')});

})();

(function() {

    var CommentsCollection = Amour.Collection.extend({
        url: Amour.APIRoot + 'shopit/data/getAllCommentByTopic.do'
    });

    var CommentsListView = Amour.CollectionView.extend({
        ModelView: Amour.ModelView.extend({
            className: 'comment-item',
            template: App.getTemplate('comment-item'),
            serializeData: function() {
                var data = Amour.ModelView.prototype.serializeData.call(this);
                data.formatted_date = moment(data.createTime).format('MM月DD日 HH:mm');
                data.like = data.like || '';
                return data;
            }
        })
    });

    App.Pages.TopicComments = new (App.PageView.extend({
        initPage: function() {
            this.comments = new CommentsCollection();
            this.views = {
                comments: new CommentsListView({
                    collection: this.comments,
                    el: this.$('.comments-list')
                })
            };
        },
        render: function() {
            var topicId = this.options.topicId;
            var self = this;
            this.comments.fetch({
                dataType: 'jsonp',
                data: { tid: topicId, size: 99, max_id: null }
            });
        }
    }))({el: $('#view-topic-comments')});

})();

(function() {

    var geolocation = new function() {
        var self = this;
        this.get = function(callback) {
            if (this.coords) {
                callback(this.coords);
            } else {
                navigator.geolocation.getCurrentPosition(function(position) {
                    self.coords = {
                        latitude: position.coords.latitude,
                        longitude: position.coords.longitude
                    };
                    callback(self.coords);
                });
            }
        };
        this.distance = function(lat1, lon1, lat2, lon2) {
            var lat1 = lat1*Math.PI/180, lon1 = lon1*Math.PI/180;
            var lat2 = lat2*Math.PI/180, lon2 = lon2*Math.PI/180;
            var R = 6371;
            var x = (lon2-lon1) * Math.cos((lat1+lat2)/2);
            var y = (lat2-lat1);
            var d = Math.sqrt(x*x + y*y) * R;
            if (d > 1) {
                return (parseInt(d * 10) / 10) + 'km';
            } else {
                return parseInt(d * 1000) + 'm';
            }
        };
    };

    var AddressCollection = Amour.Collection.extend({});

    var AddressListView = Amour.CollectionView.extend({
        ModelView: Amour.ModelView.extend({
            className: 'address-item',
            template: App.getTemplate('address-item'),
            render: function() {
                Amour.ModelView.prototype.render.call(this);
                var self = this;
                geolocation.get(function(position) {
                    var distance = geolocation.distance(
                        self.model.get('lat'), self.model.get('lng'),
                        position.latitude, position.longitude);
                    self.$('.distance').text(distance);
                });
                return this;
            }
        })
    });

    App.Pages.Address = new (App.PageView.extend({
        initPage: function() {
            this.address = new AddressCollection();
            this.views = {
                address: new AddressListView({
                    collection: this.address,
                    el: this.$('.address-list')
                })
            };
        },
        render: function() {
            var id, url;
            if (this.options.brandId) {
                id = this.options.brandId;
                url = Amour.APIRoot + 'shopit/data/listBrandStores.do';
            } else {
                id = this.options.productId;
                url = Amour.APIRoot + 'shopit/data/listStoresByItemid.do';
            }
            this.address.fetch({
                dataType: 'jsonp',
                url: url,
                data: { id: id, cityName: '北京市' }
            });
        }
    }))({el: $('#view-address')});

})();

App.start();